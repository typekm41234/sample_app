# coding: utf-8
require 'spec_helper'

describe User do
  before {@user = User.new(name:"babara", email:"1443329@qq.com", password:"foobar", password_confirmation:"foobar")}
  
  subject{ @user }
  
  it{ should respond_to(:name)}
  it{ should respond_to(:email)} 
  it{ should respond_to(:password_digest)}
  it{ should respond_to(:password)}
  it{ should respond_to(:remember_token)}
  it{ should respond_to(:password_confirmation)}
  it{ should respond_to(:authenticate)}
  it{ should respond_to(:admin)}
  it{ should respond_to(:microposts)}
  it{ should respond_to(:feed)}
  it{ should respond_to(:relationships)}
  it{ should respond_to(:followed_users)}
  it{ should respond_to(:followers)}
  it{ should respond_to(:following?)}
  it{ should respond_to(:follow!)}
  it{ should respond_to(:unfollow!)}
  it{ should be_valid}
  it{ should_not be_admin}
  

  describe "with admin attribute set to 'true'" do
    before do
      @user.save!
      @user.toggle!(:admin)
    end
    it {should be_admin}
  end
  describe "remember token" do
    before{ @user.save }
    its(:remember_token){ should_not be_blank}
  end
  
  describe "name should be valid" do
    before {@user.name= ""}
    it{ should_not be_valid }
  end

  describe "email should be valid" do
    before {@user.email = ""}
    it {should_not be_valid}
  end

  describe "name should not be too long" do
    before {@user.name = "a"*60}
    it {should_not be_valid}
  end

  describe "email should not be too long" do
    before {@user.email = "b"*60}
    it {should_not be_valid}
  end

  describe "when email format is invalid" do
    it "should be invalid" do
      addresses = %w[user@foo,com user_at_foo.org example.user@foo. foo@bar_baz.com foo@bar+baz.com]
      addresses.each do |invalid_address|
        @user.email = invalid_address
        expect(@user).not_to be_valid
      end
    end
  end

  describe "when email format is valid" do
    it "should be valid" do
      addresses = %w[user@foo.COM A_US-ER@f.b.org frst.1st@foo.jp a+b@baz.cn]
      addresses.each do |valid_address|
        @user.email = valid_address
        expect(@user).to be_valid
      end
    end
  end

  describe "when email address is already taten" do
    before do
      user_with_same_address = @user.dup
      user_with_same_address.email = @user.email.upcase
      user_with_same_address.save
    end
    it {should_not be_valid}
  end

#  describe "when password is empty" do
#    before{ @user.password=""}
#    it{should_not be_valid}
#  end

#  describe "when password_confirm is empty" do
#    before { @user.password_confirmation=""}
#    it{should_not be_valid}
#  end

  describe "when password is not match password_confirm" do
    before { @user.password_confirmation="missled"}
    it{should_not be_valid}
  end

  describe "password should not be too short" do
    before{ @user.password = @user.password_confirmation = "a"*5}
    it{ should be_invalid}
  end

  
  describe "return value of authenticate method" do
    before { @user.save}
    let(:found_user) {User.find_by(email: @user.email)}
    
    describe "with valid password" do
      it {should eq found_user.authenticate(@user.password)}
    end

    describe "with invalid password" do
      let(:user_for_invalid_password){ found_user.authenticate("invalid")}

      it {should_not eq user_for_invalid_password}
      specify { expect(user_for_invalid_password).to be_false}
    end
  end

  describe "micropost associations" do
    before {@user.save}
    
    let!(:old_micropost) do
      FactoryGirl.create(:micropost, user:@user, created_at: 1.day.ago)
    end
    
    let!(:new_micropost) { FactoryGirl.create(:micropost, user:@user, created_at: 1.hour.ago)}

    it "should have the right microposts in the right order" do
      expect(@user.microposts).to eq [new_micropost, old_micropost]
    end

#    describe "should destroy associated microposts" do
#      microposts = @user.microposts.to_a
#      @user.destroy
#      expect(microposts).not_to be_empty
#      microposts.each do |micropost|
#        expect(Micropost.Where(id: micropost.id)).to be_empty
#      end
    #    end

    describe "status" do
      let(:unfollowed_post) do
        FactoryGirl.create(:micropost, user:FactoryGirl.create(:user))
      end

      its(:feed){should include(old_micropost)}
      its(:feed){should include(new_micropost)}
      its(:feed){should_not include(unfollowed_post)}
    end
  
  end

  describe "following" do
    let(:other_user){FactoryGirl.create(:user)}
    before do
      @user.save
      @user.follow!(other_user)
    end
    
    it { should be_following(other_user)}
    its(:followed_users){should include(other_user)}

    describe "followed user" do
      subject{ other_user}
      its(:followers){should include(@user)}
    end

    describe "and unfollowing" do
      before{ @user.unfollow!(other_user)}

      it{ should_not be_following(other_user)}
      its(:followed_users){ should_not include(other_user)}
    end
  end

  describe "following/followers" do
    let(:user){FactoryGirl.create(:user)}
    let(:other_user){FactoryGirl.create(:user)}
    before{ user.follow!(other_user)}

    describe "followed users" do
      before do
        sign_in user
        visit following_user_path(user)
      end

      it {should have_title(full_title('Following'))}
      it {should have_selector('h3', text: 'Following')}
      it {should have_link(other_user.name, href: user_path(other_user))}
    end

    describe "followers" do
      before do
        sign_in other_user
        visit followers_user_path(other_user)
      end

      it {should have_title(full_title('Followers'))}
      it {should have_selector('h3', text:'Followers')}
      it {should have_link(user.name, href: user_path(user))}
    end
  end
end
